name: CI/CD

on:
  push:  # Run on all pushes
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write  # For OIDC/trusted publishing

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for setuptools-scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Run pre-commit checks
      run: |
        pre-commit run --all-files

  build-and-publish:
    name: Build and publish ðŸ“¦
    needs: [test]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'testpypi' || 'pypi' }}
      url: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'https://test.pypi.org/p/drycli' || 'https://pypi.org/p/drycli' }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for setuptools-scm

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user

    - name: Build a binary wheel and a source tarball
      run: python3 -m build

    - name: Check build artifacts
      run: |
        python3 -m pip install twine
        twine check dist/*

    - name: Publish to TestPyPI
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Publish to PyPI
      if: github.event_name == 'push' && !contains(github.ref, 'pull')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true

    - name: Upload artifacts for release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  github-release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-and-publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For creating releases
      id-token: write  # For sigstore signing

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Sign with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release create '${{ github.ref_name }}' \
          --repo '${{ github.repository }}' \
          --title 'Release ${{ github.ref_name }}' \
          --notes "Install from PyPI:
        \`\`\`bash
        pip install drycli==${{ github.ref_name }}
        \`\`\`

        Install latest dev version:
        \`\`\`bash
        pip install --pre drycli
        \`\`\`"

    - name: Upload release artifacts
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release upload '${{ github.ref_name }}' dist/** \
          --repo '${{ github.repository }}'
