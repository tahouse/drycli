[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "wry"
dynamic = ["version"]
description = "Why Repeat Yourself? - Define your CLI once with Pydantic models"
authors = [{name = "Tyler House", email = "26489166+tahouse@users.noreply.github.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: System Shells",
    "Topic :: Utilities",
]
keywords = ["cli", "pydantic", "click", "wry", "dry", "configuration", "type-safe"]
dependencies = [
    "click>=8.0",
    "pydantic>=2.9.2",  # Pin to minimum version that works with our type annotations
    "annotated-types>=0.5.0",
    "pydantic-core>=2.23.4",  # Match pydantic 2.9.2 requirements
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "pytest-xdist",  # Parallel test execution
    "ruff",
    "mypy>=1.17.1",  # Pin to version that properly detects redundant casts
    "build",
    "twine",
    "setuptools-scm>=8.0",  # Version management from git tags
    "pre-commit",           # Pre-commit hooks for quality gates
    "safety",               # Security vulnerability scanning
    "bandit[toml]",         # Security linting
]
test = [
    "pytest>=6.0",
    "pytest-cov",
    "pytest-xdist",
]

[project.urls]
Homepage = "https://github.com/tahouse/wry"
Repository = "https://github.com/tahouse/wry"
Issues = "https://github.com/tahouse/wry/issues"
Documentation = "https://github.com/tahouse/wry#readme"

[tool.setuptools.packages.find]
include = ["wry*"]

[tool.setuptools.package-data]
wry = ["py.typed"]

[tool.ruff]
target-version = "py310"
line-length = 120
extend-exclude = [
    "wry/_version.py",  # Auto-generated by setuptools-scm
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.ruff.lint.per-file-ignores]
# Allow lambdas and assert False in test files
"tests/**/*.py" = ["E731", "B011"]
# Allow unused variables in test files
"tests/**/test_*.py" = ["F841"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=wry",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.setuptools_scm]
# Get version from git tags
write_to = "wry/_version.py"
fallback_version = "0.0.1.dev0"
# Configure version string that includes git info in metadata
# Use "guess-next-dev" to generate next patch .devN versions between releases
# These show as pre-releases on PyPI (unlike .postN versions)
version_scheme = "guess-next-dev"
local_scheme = "no-local-version"
